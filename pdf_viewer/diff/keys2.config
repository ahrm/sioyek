
# you can edit this file to change keybindings lines that start with '#' are comments
# the syntax is pretty simple. Some examples:
#command        k             (command is executed when k is pressed)
#command        <C-k>         (command is executed when k is pressed while holding control)
#command        <S-k>         (command is executed when k is pressed while holding shift)
#command        <A-k>         (command is executed when k is pressed while holding alt)
#command        <S-+>         (command is executed when = is pressed while holding shift.
#                                Note that <S-=> would not work because of a bug in the command system so
#                                when prefixing non-ascii keys with shift, you have to specify the shift
#                                modified key in addition to the shift modifier)
#command        <C-S-k>       (command is executed when k is pressed while holding control and shift)
#command        gg            (command is executed when g is pressed twice)
#command        gt            (command is executed when g is pressed and then t is pressed)
#command        g<C-n><S-d>t  (command is executed when g is pressed and then n is pressed while holding\
#                               control and then d is pressed while holding shift and then t is pressed)


# ---------- NAVIGATION AND ZOOM ----------

# Goto the begining of document. If prefixed with a number, it will go to that page.
# for example 150gg goes to page 150.
goto_begining       gg
goto_begining		<C-<home>>

# Opens a prompt to enter page number and jump to that page
goto_page_with_page_number		<home>

# Goto the end of the document
goto_end            <end>
goto_end            <S-g>

# movement (can be prefixed with a number)
move_down           <down>
move_up             <up>
move_left           <right>
move_right          <left>

# Goto forward for one page width. (can be prefixed with a number)
# (note that going forward for one page width is not usually what you want becaue if 
# the page is larger than the screen you will miss some content. What you usually want is screen_down)
next_page           <C-<pagedown>>
previous_page       <C-<pageup>>

# Go down one screen width (can be prefixed with a number which tells how many screen widths should we go down)
screen_down         <space>
screen_up         <S-space>
screen_down         <pagedown>
screen_up           <pageup>

# Goto the next/prev chapter
next_chapter        gc
prev_chapter        g<S-c>

# Goto previous viewing state and delete the current (and future) state(s).
pop_state           w

# if we are not at the end of viewing history, goto the next history point
next_state          <l>
# goto the previous history point
prev_state          <h>
prev_state          <backspace>
next_state          <C-<right>>
prev_state          <C-<left>>

# Open table of contents.
goto_toc            t

# zoom
zoom_in             <S-+>
zoom_out            =
zoom_out            -

# Automatically set the zoom level and horizontal offset such that the current page is centered horizontally and
# it fills the screen width
fit_to_page_width   <f9>
# same as fit_to_page_with but ignores page margins
fit_to_page_width_smart   <f10>

# Open a file dialog to select a document.
open_document       o
open_document_embedded       <C-o>

# Open a searchable list of previously opened documents.
open_prev_doc       <S-o>


# ---------- SEARCH ----------

# search the document. 
# example: /something                   (searches the document for 'something')
# you can also specify a page range to search:
# example: /<110,135>something          (searches pages 110 to 135 (inclusive) for 'something')
search              <C-f>
search              /

# this is the same as search.
ranged_search       r<C-f>
ranged_search       r/

# searches the current chapter. This is essentially the same as search but the range prefix is autofilled
# with the range of the current lowest level subchapter.
chapter_search      c<C-f>
chapter_search      c/

# Goto the next search item. Can be prefixed with a number which is the same as performing the command n times
# for example if we are on the 10th search result and we input 15n, we go to the 25th search result. 
next_item           n
# Goto the previous search result. Can be prefixed with a number with similar rules as next_item.
previous_item       <S-n>

# ---------- BOOKMARKS ----------
# Add a bookmark in the current location (opens a text input where you can specify the bookmark text)
add_bookmark        b
delete_bookmark     db

# Open bookmarks menu of the current document.
goto_bookmark       gb

# Open bookmarks menu of all documents.
goto_bookmark_g     g<S-b>

# ---------- HIGHLIGHTS ----------
# you can select a piece of text and press the `add_highlight` shortcut followed by a symbol (a character from a-z) to highlight
# the text
add_highlight		h
# search in highlights of current document
goto_highlight		gh
# search in highlights of all documents
goto_highlight_g	g<S-h>
# click on a highlight and then press the `delete_highlight` shortcut to delete it.
delete_highlight	dh

# ---------- MARKS ----------

# Mark the current location. After pressing the mark button, you must enter a symbol (a letter from a-z or A-Z).
# this marks the current location in the file with the entered symbol. Afterwards you will be able to return to
# the locations of the marks using goto_mark command.
# example:  mm      (marks the current location in the file with a mark named 'm')
set_mark            m
# Goto a previously set mark. After pressing goto_mark you must enter a symbol associated with a previously set mark.
# example:  `m      (goes to the location of the mark named m)
goto_mark           `


# ---------- PORTALS ----------
# If we are in default state, goto portal state with the current location in document as the portal source
# if we are already in the portal state, create the portal with the current location as destination.
link                p

# Delete the portal with the closest source to current location
delete_link         dp

# Goto the position of the portal with the closest source to current location
goto_link           <tab>

# Similar to goto_link, except when prev_state is called, the destination of the link is update to be the state
# on which prev_state is called
edit_link           <S-p>
edit_link           <S-<tab>>

# Open/Close the helper window for portals
toggle_one_window   <f12>

# ---------- MISC ----------

# copy selected text
copy                <C-c>

toggle_fullscreen   <f11>

# Toggles whether we highlight pdf links or not
toggle_highlight    <f1>

# open command line
command             <S-:>

# seach the selected text using one of the search engines defined using search_url_* settings in prefs.config (* can be any letter between 'a' and 'z')
external_search		s

#search_selected_text_in_google_scholar      ss
#search_selected_text_in_libgen              sl

open_selected_url			    <S-q>

toggle_dark_mode	<f8>

# toggle synctex mode. When in synctex mode, right clicking on a pdf launches the corresponding latex page.
toggle_synctex		<f4>

# while in mouse drag mode, instead of selecting text you can pan the screen using mouse
toggle_mouse_drag_mode	<f6>

# command the move the visual mark to the next/previous line
move_visual_mark_up		k
move_visual_mark_down	j

# In visual scroll mode, mouse wheel performs `move_visual_mark_up` and `move_visual_mark_down` commands
toggle_visual_scroll	<f7>

toggle_presentation_mode	<f5>

#quit		q
